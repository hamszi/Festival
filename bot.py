import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from database import init_db, add_spectator, add_participant

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

class SpectatorStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_family_size = State()
    waiting_for_name_age = State()

class ParticipantStates(StatesGroup):
    waiting_for_team_size = State()
    waiting_for_team_name = State()
    waiting_for_location = State()
    waiting_for_participants_info = State()
    waiting_for_special_status = State()
    waiting_for_phone = State()
    waiting_for_accommodation = State()

def get_role_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üé£ –Ø –ü–†–ò–î–£ –ö–ê–ö –ó–†–ò–¢–ï–õ–¨", callback_data="spectator"),
            InlineKeyboardButton(text="üèÜ –•–û–ß–£ –ü–†–ò–ù–Ø–¢–¨ –£–ß–ê–°–¢–ò–ï", callback_data="participant")
        ]
    ])
    return keyboard

def get_family_size_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–∏–¥—É –æ–¥–∏–Ω", callback_data="family_size_1"),
            InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü—Ä–∏–¥—É —Å —Å–µ–º—å—ë–π", callback_data="family_size_family")
        ]
    ])
    return keyboard

def get_special_status_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="special_status_yes"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="special_status_no")
        ]
    ])
    return keyboard

def get_accommodation_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üè† –ù–æ—á—É–µ–º –¥–æ–º–∞", callback_data="accommodation_home")
        ],
        [
            InlineKeyboardButton(text="‚õ∫ –ù–æ—á—É–µ–º –≤ —Å–≤–æ–µ–π –ø–∞–ª–∞—Ç–∫–µ", callback_data="accommodation_own_tent")
        ],
        [
            InlineKeyboardButton(text="‚õ∫ –ù—É–∂–Ω–∞ –∞—Ä–µ–Ω–¥–∞ –ø–∞–ª–∞—Ç–∫–∏", callback_data="accommodation_rent_tent")
        ],
        [
            InlineKeyboardButton(text="üè® –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –Ω–æ–º–µ—Ä–µ", callback_data="accommodation_room")
        ]
    ])
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    welcome_text = """üé£ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å–µ–º–µ–π–Ω–æ–≥–æ —Ä—ã–±–æ–ª–æ–≤–Ω–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è 2025 ¬´–ü–∞–ø–∞,–º–∞–º–∞,—è-—Ä—ã–±–æ–ª–æ–≤–Ω–∞—è —Å–µ–º—å—è¬ª! üé£

üìÖ –î–∞—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:
31 –º–∞—è (1 —Ç—É—Ä)
1 –∏—é–Ω—è (2 —Ç—É—Ä)

üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: –ó–∞–ª–∏–≤ —Ä.–í–æ–ª–≥–∏, –ø.–ó–∞–π–º–∏—â–µ

–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ:"""
    
    await message.answer(welcome_text, reply_markup=get_role_keyboard())

@dp.callback_query(lambda c: c.data in ["spectator", "participant"])
async def process_role_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "spectator":
        date_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ 31 –º–∞—è", callback_data="date_31"),
                InlineKeyboardButton(text="üìÖ 1 –∏—é–Ω—è", callback_data="date_1")
            ],
            [InlineKeyboardButton(text="üìÖ –ë—É–¥—É 2 –¥–Ω—è", callback_data="date_both")]
        ])
        await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:", reply_markup=date_keyboard)
        await state.set_state(SpectatorStates.waiting_for_date)
    else:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        team_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üë• {i} —á–µ–ª–æ–≤–µ–∫", callback_data=f"team_{i}") for i in range(2, 6)]
        ])
        await callback.message.answer("üë• –ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ (–æ—Ç 2 –¥–æ 5)?", reply_markup=team_keyboard)
        await state.set_state(ParticipantStates.waiting_for_team_size)

@dp.callback_query(lambda c: c.data.startswith("date_"), SpectatorStates.waiting_for_date)
async def process_date_selection(callback: types.CallbackQuery, state: FSMContext):
    date_text = {
        "date_31": "31 –º–∞—è",
        "date_1": "1 –∏—é–Ω—è",
        "date_both": "31 –º–∞—è –∏ 1 –∏—é–Ω—è"
    }
    await state.update_data(selected_date=date_text[callback.data])
    await callback.message.answer(f"üìÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date_text[callback.data]}")
    await callback.message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–π—Ç–∏:", reply_markup=get_family_size_keyboard())
    await state.set_state(SpectatorStates.waiting_for_family_size)

@dp.callback_query(lambda c: c.data.startswith("family_size_"), SpectatorStates.waiting_for_family_size)
async def process_family_size(callback: types.CallbackQuery, state: FSMContext):
    family_text = {
        "family_size_1": "–æ–¥–∏–Ω",
        "family_size_family": "—Å —Å–µ–º—å—ë–π"
    }
    await state.update_data(family_size=family_text[callback.data])
    await callback.message.answer(f"üë• –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∏–π—Ç–∏ {family_text[callback.data]}")
    await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç (–∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–ª–µ–Ω–æ–≤ –≤–∞—à–µ–π —Å–µ–º—å–∏):")
    await state.set_state(SpectatorStates.waiting_for_name_age)

@dp.message(SpectatorStates.waiting_for_name_age)
async def process_name_age(message: types.Message, state: FSMContext):
    data = await state.get_data()
    success = add_spectator(
        user_id=message.from_user.id,
        date=data['selected_date'],
        family_size=data['family_size'],
        name_age=message.text
    )
    
    if success:
        await message.answer("""‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üìû –ü–æ –ª—é–±—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª.: 89‚Ä¶‚Ä¶‚Ä¶.

üé£ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ò –∂–¥—ë–º –í–∞—Å/–≤–∞—à—É —Å–µ–º—å—é –Ω–∞ –§–µ—Å—Ç–∏–≤–∞–ª–µ!""")
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("team_"), ParticipantStates.waiting_for_team_size)
async def process_team_size(callback: types.CallbackQuery, state: FSMContext):
    team_size = callback.data.split("_")[1]
    await state.update_data(team_size=team_size)
    await callback.message.answer(f"üë• –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ {team_size} —á–µ–ª–æ–≤–µ–∫")
    await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã:")
    await state.set_state(ParticipantStates.waiting_for_team_name)

@dp.message(ParticipantStates.waiting_for_team_name)
async def process_team_name(message: types.Message, state: FSMContext):
    await state.update_data(team_name=message.text)
    await message.answer("üìç –ö–∞–∫–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç/—Ä–µ–≥–∏–æ–Ω/—Å—Ç—Ä–∞–Ω—É –≤—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ?")
    await state.set_state(ParticipantStates.waiting_for_location)

@dp.message(ParticipantStates.waiting_for_location)
async def process_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    await message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –∏—Ö –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:")
    await state.set_state(ParticipantStates.waiting_for_participants_info)

@dp.message(ParticipantStates.waiting_for_participants_info)
async def process_participants_info(message: types.Message, state: FSMContext):
    await state.update_data(participants_info=message.text)
    await message.answer("""‚ùì –ï—Å—Ç—å –ª–∏ –≤ —Å–µ–º—å–µ –¥–µ—Ç–∏-–∏–Ω–≤–∞–ª–∏–¥—ã –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º/–≤–µ—Ç–µ—Ä–∞–Ω–æ–º –°–í–û?""", 
                        reply_markup=get_special_status_keyboard())
    await state.set_state(ParticipantStates.waiting_for_special_status)

@dp.callback_query(lambda c: c.data.startswith("special_status_"), ParticipantStates.waiting_for_special_status)
async def process_special_status(callback: types.CallbackQuery, state: FSMContext):
    status = callback.data.split("_")[2]
    await state.update_data(special_status=status)
    
    if status == "yes":
        await callback.message.answer("""‚úÖ –í–∞—à–∞ —Å–µ–º—å—è –ø—Ä–∏–º–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ –Ω–∞ –ª—å–≥–æ—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.
        
üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏:""")
    else:
        await callback.message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    
    await state.set_state(ParticipantStates.waiting_for_phone)

@dp.message(ParticipantStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("""üè† –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞–∫–µ—Ç —Å –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ–º –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è:""", 
                        reply_markup=get_accommodation_keyboard())
    await state.set_state(ParticipantStates.waiting_for_accommodation)

@dp.callback_query(lambda c: c.data.startswith("accommodation_"), ParticipantStates.waiting_for_accommodation)
async def process_accommodation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    accommodation = callback.data.split("_")[1]

    prices = {
        "home": {"adult": 1500, "child": 750},
        "own_tent": {"adult": 1600, "child": 850},
        "rent_tent": {"adult": 2000, "child": 1200},
        "room": {"adult": 4000, "child": 2500}
    }
    
    price = prices[accommodation]
    await callback.message.answer(f"""üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:
–í–∑—Ä–æ—Å–ª—ã–π: {price['adult']}‚ÇΩ
–†–µ–±–µ–Ω–æ–∫: {price['child']}‚ÇΩ""")

    success = add_participant(
        user_id=callback.from_user.id,
        team_size=data['team_size'],
        team_name=data['team_name'],
        location=data['location'],
        participants_info=data['participants_info'],
        special_status=data['special_status'],
        phone=data['phone'],
        accommodation=accommodation
    )
    
    if success:
        await callback.message.answer("""‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞—à–∞ —Å–µ–º—å—è –ø—Ä–∏–º–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Å–µ–º–µ–π–Ω–æ–º —Ä—ã–±–æ–ª–æ–≤–Ω–æ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ 2025 ¬´–ü–∞–ø–∞, –º–∞–º–∞, —è - —Ä—ã–±–æ–ª–æ–≤–Ω–∞—è —Å–µ–º—å—è¬ª!

üé£ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–º —Å–æ–±—ã—Ç–∏–∏ —ç—Ç–æ–≥–æ –≥–æ–¥–∞!""")
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

@dp.startup()
async def startup():
    init_db()

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 